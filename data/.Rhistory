pk1 = points[(k + 1) % n],
pik = lineLineIntersection(pi0[0], pi0[1], pi1[0], pi1[1], pk0[0], pk0[1], pk1[0], pk1[1]),
pjk = k === j + 1 ? pk0 : lineLineIntersection(pj0[0], pj0[1], pj1[0], pj1[1], pk0[0], pk0[1], pk1[0], pk1[1]),
candidate = triangleIncircle(pij[0], pij[1], pik[0], pik[1], pjk[0], pjk[1]),
radius = candidate.radius;
for (var l = 0; l < n; ++l) {
var pl0 = points[l],
pl1 = points[(l + 1) % n],
r = pointLineDistance(candidate[0], candidate[1], pl0[0], pl0[1], pl1[0], pl1[1]);
if (r < circle.radius) continue search;
if (r < radius) radius = r;
}
circle = candidate;
circle.radius = radius;
}
}
}
return circle;
}
// Returns the angle between segments 01 and 12.
function innerAngle(x0, y0, x1, y1, x2, y2) {
var x01 = x0 - x1, y01 = y0 - y1,
x12 = x1 - x2, y12 = y1 - y2,
x02 = x0 - x2, y02 = y0 - y2,
l01_2 = x01 * x01 + y01 * y01,
l12_2 = x12 * x12 + y12 * y12,
l02_2 = x02 * x02 + y02 * y02;
return Math.acos((l12_2 + l01_2 - l02_2) / (2 * Math.sqrt(l12_2 * l01_2)));
}
// Returns the intersection of the infinite lines 01 and 23.
function lineLineIntersection(x0, y0, x1, y1, x2, y2, x3, y3) {
var x02 = x0 - x2, y02 = y0 - y2,
x10 = x1 - x0, y10 = y1 - y0,
x32 = x3 - x2, y32 = y3 - y2,
t = (x32 * y02 - y32 * x02) / (y32 * x10 - x32 * y10);
return [x0 + t * x10, y0 + t * y10];
}
// Returns the signed distance from point 0 to the infinite line 12.
function pointLineDistance(x0, y0, x1, y1, x2, y2) {
var x21 = x2 - x1, y21 = y2 - y1;
return (y21 * x0 - x21 * y0 + x2 * y1 - y2 * x1) / Math.sqrt(y21 * y21 + x21 * x21);
}
// Returns the largest circle inside the triangle 012.
function triangleIncircle(x0, y0, x1, y1, x2, y2) {
var x01 = x0 - x1, y01 = y0 - y1,
x02 = x0 - x2, y02 = y0 - y2,
x12 = x1 - x2, y12 = y1 - y2,
l01 = Math.sqrt(x01 * x01 + y01 * y01),
l02 = Math.sqrt(x02 * x02 + y02 * y02),
l12 = Math.sqrt(x12 * x12 + y12 * y12),
k0 = l01 / (l01 + l02),
k1 = l12 / (l12 + l01),
center = lineLineIntersection(x0, y0, x1 - k0 * x12, y1 - k0 * y12, x1, y1, x2 + k1 * x02, y2 + k1 * y02);
center.radius = Math.sqrt((l02 + l12 - l01) * (l12 + l01 - l02) * (l01 + l02 - l12) / (l01 + l02 + l12)) / 2;
return center;
}
### Exercise 3 ###
### Exercise 3 ###
library(jsonlite)
library(dplyr)
library(plotly)
# Read in this police shooting JSON data
# https://raw.githubusercontent.com/mkfreeman/police-shooting/master/data/response.json
data <- fromJSON('https://raw.githubusercontent.com/mkfreeman/police-shooting/master/data/response.json')
View(data)
# Dealing with the `Shots Fired` column
# Creating a new Numeric variable with no space in the name
# Replacing NA values with the mean (that makes sense, right?)
data$shots_fired <- as.numeric(data[,'Shots Fired'])
data <- data %>%
mutate(shots_fired = ifelse(is.na(shots_fired), mean(shots_fired, na.rm = T), shots_fired))
# Create a bubble map of the data
g<- list(
scope= 'usa',
projecction<- list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("black"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
plot_ly(data,
lon = lng,
lat = lat,
text = paste('<b>Name:</b>', data[,"Victim Name"], '<br><b>Shots Fired:</b>', data$shots_fired),
hoverinfo = 'text',
marker = list(size = 1 + shots_fired/3, opacity = .4, color = 'red'),
type = 'scattergeo',
locationmode = 'USA-states'
) %>%
layout(title = 'Police Shootings', geo = g)
### Bonus: create informative hover text ###
### Bonus: Use multiple colors ###
### Exercise 3 ###
library(jsonlite)
library(dplyr)
library(plotly)
# Read in this police shooting JSON data
# https://raw.githubusercontent.com/mkfreeman/police-shooting/master/data/response.json
data <- fromJSON('https://raw.githubusercontent.com/mkfreeman/police-shooting/master/data/response.json')
View(data)
# Dealing with the `Shots Fired` column
# Creating a new Numeric variable with no space in the name
# Replacing NA values with the mean (that makes sense, right?)
data$shots_fired <- as.numeric(data[,'Shots Fired'])
data <- data %>%
mutate(shots_fired = ifelse(is.na(shots_fired), mean(shots_fired, na.rm = T), shots_fired))
# Create a bubble map of the data
g<- list(
scope= 'usa',
projecction<- list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("black"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
plot_ly(data,
lon = lng,
lat = lat,
text = paste('<b>Name:</b>', data[,"Victim Name"], '<br><b>Shots Fired:</b>', data$shots_fired),
hoverinfo = 'text',
marker = list(size = 1 + shots_fired/3, opacity = .4, color = 'red'),
type = 'scattergeo',
locationmode = 'USA-states'
) %>%
layout(title = 'Police Shootings', geo = g)
### Bonus: create informative hover text ###
### Bonus: Use multiple colors ###
### Exercise 3 ###
library(jsonlite)
library(dplyr)
library(plotly)
# Read in this police shooting JSON data
# https://raw.githubusercontent.com/mkfreeman/police-shooting/master/data/response.json
data <- fromJSON('https://raw.githubusercontent.com/mkfreeman/police-shooting/master/data/response.json')
View(data)
# Dealing with the `Shots Fired` column
# Creating a new Numeric variable with no space in the name
# Replacing NA values with the mean (that makes sense, right?)
data$shots_fired <- as.numeric(data[,'Shots Fired'])
data <- data %>%
mutate(shots_fired = ifelse(is.na(shots_fired), mean(shots_fired, na.rm = T), shots_fired))
# Create a bubble map of the data
g<- list(
scope= 'usa',
projecction<- list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("black"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
plot_ly(data,
lon = lng,
lat = lat,
text = paste('<b>Name:</b>', data[,"Victim Name"], '<br><b>Shots Fired:</b>', data$shots_fired),
hoverinfo = 'text',
marker = list(size = 1 + shots_fired/3, opacity = .4, color = 'red'),
type = 'scattergeo',
locationmode = 'USA-states'
) %>%
layout(title = 'Police Shootings', geo = g)
### Bonus: create informative hover text ###
### Bonus: Use multiple colors ###
install.packages("RColorBrewer")
library(dplyr)
library(Cairo)
library(rgeos)
library(plotly)
library(knitr)
library(ggplot2)
library(maptools)
library(scales)
library(RColorBrewer)
set.seed(8000)
states.shp <- readShapeSpatial("USA_adm1.shp")
library(rgeos)
install.packages('rgeos', type="source")
install.packages('rgdal', type="source")
library(rgeos)
install.packages('rgeos', type="source")
library(rgeos)
library(rgeos)
library(RgoogleMaps)
states.shp <- readShapeSpatial("USA_adm1.shp")
library(rgdal)
library(rgdal)
install.packages('rgdal', type="source")
library(rgdal)
c(3,5,4,7,4,5,6,4,3,2)
sd(c)
sd(c)
c <-c(3,5,4,7,4,5,6,4,3,2)
sd(c)
library(jsonlite)
library(plotly)
library(dplyr)
library(shiny)
survey<- read.csv(file = 'intro_survey_data.csv')
survey<- read.csv(file = 'intro_survey_data.csv')
setwd("/Users/Edward/Documents/a7-collaborative-coding-teamhw/data")
survey<- read.csv(file = 'intro_survey_data.csv')
View(survey)
map<- function(data){
hist(survey$How.many.countries.have.you.visited.in.your.life., breaks=12, col="gray65",
main="Histogram with Normal Curve")
}
map<- function(data){
histogram<- hist(survey$How.many.countries.have.you.visited.in.your.life., breaks=12, col="gray65",
main="Histogram with Normal Curve")
return(histogram)
}
map(How.many.countries.have.you.visited.in.your.life.)
map<- function(data){
histogram<- hist(survey, survey$How.many.countries.have.you.visited.in.your.life., breaks=12, col="gray65", xlab="How many countries have you visited"
main="Histogram with Normal Curve")
xfit<-seq(min(x),max(x),length=40)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
yfit <- yfit*diff(h$mids[1:2])*length(x)
return(histogram)
}
map<- function(data){
histogram<- hist(survey, survey$How.many.countries.have.you.visited.in.your.life., breaks=12, col="gray65", xlab="How many countries have you visited",
main="Histogram with Normal Curve")
xfit<-seq(min(x),max(x),length=40)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
yfit <- yfit*diff(h$mids[1:2])*length(x)
return(histogram)
}
map(How.many.countries.have.you.visited.in.your.life.)
map(0)
map<- function(data){
histogram<- hist(survey, survey$How.many.countries.have.you.visited.in.your.life., breaks=12, col="gray65", xlab="How many countries have you visited",
main="Histogram with Normal Curve")
return(histogram)
}
map("How.many.countries.have.you.visited.in.your.life.")
map(How.many.countries.have.you.visited.in.your.life.)
### Build map function ###
build_map <- function(data) {
# Create a bubble map of the data
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = FALSE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 0,
subunitcolor = toRGB("gray85"),
countrycolor = toRGB('gray85')
)
# Create graph
map <- plot_ly(data,
lon = lng,
lat = lat,
text = paste('<b>Name:</b>', data[,"Victim Name"], '<br><b>Shots Fired:</b>', data$shots_fired),
hoverinfo = 'text',
marker = list(size = 1 + shots_fired/3, opacity = .4, color = 'red'),
type = 'scattergeo',
locationmode = 'USA-states'
) %>%
layout(title = 'Crowdsourced Police Shootings', geo = g)
return(map)
}
histogram<- hist(survey, survey$How.many.countries.have.you.visited.in.your.life., breaks=12, col="gray65")
histogram<- hist(survey$How.many.countries.have.you.visited.in.your.life., breaks=12, col="gray65")
histogram<- hist(survey$How.many.countries.have.you.visited.in.your.life., breaks=12, col="gray65")
map<- function(data){
histogram<- hist(survey$data, breaks=12, col="gray65")
return(histogram)
}
build_map(How.many.countries.have.you.visited.in.your.life.)
map<- function(data){
histogram<- hist(survey$data, breaks=12, col="gray65")
return(histogram)
}
map("How.many.countries.have.you.visited.in.your.life.")
as.numeric(survey)
library(plotrix)
install.packages(plotrix)
install.packages("plotrix")
library(plotrix)
rename(survey)<- gsub("", ".")
rename(survey)<- gsub("", ".", survey)
gsub("", ".", survey)
re_survey<- gsub("", ".", survey)
View(re_survey)
library(jsonlite)
library(plotly)
library(dplyr)
library(shiny)
##install.packages("plotrix")
library(plotrix)
setwd("/Users/Edward/Documents/a7-collaborative-coding-teamhw/data")
survey<- read.csv(file = 'intro_survey_data.csv')
map<- function(data){
histogram<- hist(survey$data, breaks=12, col="gray65")
return(histogram)
}
pie_map<- function(data){
slices(colnames(survey))
}
### Build map function ###
build_map <- function(data) {
# Create a bubble map of the data
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = FALSE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 0,
subunitcolor = toRGB("gray85"),
countrycolor = toRGB('gray85')
)
# Create graph
map <- plot_ly(data,
lon = lng,
lat = lat,
text = paste('<b>Name:</b>', data[,"Victim Name"], '<br><b>Shots Fired:</b>', data$shots_fired),
hoverinfo = 'text',
marker = list(size = 1 + shots_fired/3, opacity = .4, color = 'red'),
type = 'scattergeo',
locationmode = 'USA-states'
) %>%
layout(title = 'Crowdsourced Police Shootings', geo = g)
return(map)
}
View(data)
build_map(3)
View(map)
View(build_map)
build_map("Washington")
View(map)
map1<- function(data){
histogram<- hist(survey$data, breaks=12, col="gray65")
return(histogram)
}
pie_map<- function(data){
slices(colnames(survey), )
}
View(map)
### Build map function ###
build_map <- function(data) {
# Create a bubble map of the data
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = FALSE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 0,
subunitcolor = toRGB("gray85"),
countrycolor = toRGB('gray85')
)
# Create graph
map <- plot_ly(data,
lon = lng,
lat = lat,
text = paste('<b>Name:</b>', data[,"Victim Name"], '<br><b>Shots Fired:</b>', data$shots_fired),
hoverinfo = 'text',
marker = list(size = 1 + shots_fired/3, opacity = .4, color = 'red'),
type = 'scattergeo',
locationmode = 'USA-states'
) %>%
layout(title = 'Crowdsourced Police Shootings', geo = g)
return(map)
}
View(map)
View(build_map)
View(build_map)
View(build_map)
View(build_map)
setwd("/Users/Edward/Documents/a7-collaborative-coding-teamhw/data")
survey<- read.csv(file = 'intro_survey_data.csv')
build_map(survey)
map1<- function(data){
histogram<- hist(data, breaks=12, col="gray65")
return(histogram)
}
map1(survey)
map1(survey$What.is.your.current.class.standing.)
pie_map<- function(data){
slices(data)
}
pie_map(survey$What.is.your.current.class.standing.)
pie_map<- function(data){
slices<- "data"
lbls <- colnames("data")
pct <- round(slices/sum(slices)*100)
lbls <- paste(lbls, pct)
lbls <- paste(lbls,"%",sep="")
pie(slices,labels = lbls, col=rainbow(length(lbls)),
main="Pie Chart of Countries")
}
map1<- function(data){
histogram<- hist(data, breaks=12, col="gray65")
return(histogram)
}
map1(survey$How.many.countries.have.you.visited.in.your.life.)
map1(survey$What.is.your.familiarity.with..using.git.for.version.control)
map1<- function(data){
histogram<- hist(data, breaks=12, col="gray65", main = "data")
return(histogram)
}
map1(survey$How.many.countries.have.you.visited.in.your.life.)
map1<- function(data){
histogram<- hist(data, breaks=12, col="gray65", main = data)
return(histogram)
}
map1(survey$How.many.countries.have.you.visited.in.your.life.)
map1<- function(data){
histogram<- hist(data, breaks=12, col="gray65", main = colnames(data))
return(histogram)
}
map1(survey$How.many.countries.have.you.visited.in.your.life.)
map1<- function(data){
histogram<- hist(data, breaks=12, col="gray65")
return(histogram)
}
map1(survey$How.many.countries.have.you.visited.in.your.life.)
x <- rnorm(100)
y <- rnorm(100)
plot(x,y, col='blue')
map1<- function(data){
histogram<- hist(data, breaks=12, col="gray65",
main= "Histogram from Survey Data",
xlab = print(data),
border="blue",
xlim=c(100,700),
las=1, )
return(histogram)
}
map1(survey$How.many.countries.have.you.visited.in.your.life.)
map1<- function(data){
histogram<- hist(data, breaks=12, col="gray65",
main= "Histogram from Survey Data",
xlab = print(data),
border="blue")
return(histogram)
}
map1(survey$How.many.countries.have.you.visited.in.your.life.)
map1<- function(data){
histogram<- hist(data, breaks=12, col="gray65",
main= "Histogram from Survey Data",
xlab = paste(data),
border="blue")
return(histogram)
}
map1(survey$How.many.countries.have.you.visited.in.your.life.)
map1(survey$How.many.countries.have.you.visited.in.your.life.)
map1<- function(data){
histogram<- hist(data, breaks=12, col="gray65",
main= "Histogram from Survey Data",
border="blue")
return(histogram)
}
map1(survey$How.many.countries.have.you.visited.in.your.life.)
map1<- function(data){
histogram<- hist(survey,data, breaks=12, col="gray65",
main= "Histogram from Survey Data",
border="blue")
return(histogram)
}
map1(survey$How.many.countries.have.you.visited.in.your.life.)
map1<- function(data){
histogram<- hist(survey,"data", breaks=12, col="gray65",
main= "Histogram from Survey Data",
border="blue")
return(histogram)
}
map1(survey$How.many.countries.have.you.visited.in.your.life.)
map1(survey$How.many.countries.have.you.visited.in.your.life.)
map1<- function(data){
histogram<- hist("data", breaks=12, col="gray65",
main= "Histogram from Survey Data",
border="blue")
return(histogram)
}
map1(survey$How.many.countries.have.you.visited.in.your.life.)
map1<- function(data){
histogram<- hist(data, breaks=12, col="gray65",
main= "Histogram from Survey Data",
border="blue")
return(histogram)
}
map1(survey$How.many.countries.have.you.visited.in.your.life.)
map1<- function(data){
histogram<- hist(data, breaks=12, col="grey65",
main= "Histogram from Survey Data",
border="blue")
return(histogram)
}
map1(survey$How.many.countries.have.you.visited.in.your.life.)
library(jsonlite)
library(plotly)
library(dplyr)
library(shiny)
##install.packages("plotrix")
library(plotrix)
setwd("/Users/Edward/Documents/a7-collaborative-coding-teamhw/data")
survey<- read.csv(file = 'intro_survey_data.csv')
map<- function(data){
histogram<- hist(data, breaks=12, col="grey65",
main= "Histogram from Survey Data",
border="blue")
return(histogram)
}
